pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}"
    }

    stages {
        // stage ('SonarQube Scan') {
        //     steps {
        //         script {
        //             scannerHome = tool 'sonarqube'
        //         }
        //         withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]) {
        //             withSonarQubeEnv('SonarQubeScanner') {
        //                 sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=CliXX-App-Dolapo -Dsonar.login=${SONAR_TOKEN}"
        //             }
        //         }
        //     }
        // }

        // stage('Quality Gate') {
        //     steps {
        //         timeout(time: 10, unit: 'MINUTES') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }

        // stage ('Build Docker Image') {
        //     steps {
        //         sh "docker build . -t clixx-image:$VERSION"
        //     }
        // }

        stage ('Starting Docker Image') {
            steps {
                sh '''
                if docker ps | grep clixx-cont-1; then
                    echo "Docker image exists, killing it"
                    docker stop clixx-cont-1
                    docker rm clixx-cont-1
                fi
                docker run --name clixx-cont-1 -p 80:80 -d clixx-image:$VERSION
                '''
            }
        }

        stage ('Restore CliXX Database') {
            steps {
                withCredentials([string(credentialsId: 'secret_key', variable: 'SECRET_KEY_VAR'), string(credentialsId: 'access_key', variable: 'ACCESS_KEY_VAR')]) {
                    sh '''
                    pip3 install boto3 botocore boto
                    ansible-playbook -i localhost $WORKSPACE/deploy_db_ansible/deploy_db.yml --extra-vars "access_key=${ACCESS_KEY_VAR} secret_key=${SECRET_KEY_VAR}"
                    '''
                }
            }
        }

        stage ('Configure DB Instance') {
            steps {
                withCredentials([string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER_NAME_VAR'), string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD_VAR'), string(credentialsId: 'DB_NAME', variable: 'DB_NAME_VAR'), string(credentialsId: 'SERVER_INSTANCE', variable: 'SERVER_INSTANCE_VAR')]) {
                    sh '''
                    USERNAME=${DB_USER_NAME_VAR}
                    PASSWORD=${DB_PASSWORD_VAR}
                    DBNAME=${DB_NAME_VAR}
                    TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`
                    SERVER_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4`
                    SERVER_INSTANCE=${SERVER_INSTANCE_VAR}
                    echo "use wordpressdb;" >> $WORKSPACE/db.setup
                    echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE '%NLB%';" >> $WORKSPACE/db.setup
                    mysql -u $USERNAME --password=$PASSWORD -h $SERVER_INSTANCE -D $DBNAME < $WORKSPACE/db.setup
                    '''
                }
            }
        }

        stage ('Tear Down CliXX Docker Image and Database') {
            steps {
                withCredentials([string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER_NAME'), string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'), string(credentialsId: 'DB_NAME', variable: 'DB_NAME'), string(credentialsId: 'SERVER_INSTANCE', variable: 'SERVER_INSTANCE')]) {
                    script {
                        def userInput = input(id: 'confirm', message: 'Tear Down Environment?', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down Environment?', name: 'confirm']])
                    }
                    sh '''
                    python3 -m venv python3-virtualenv
                    source python3-virtualenv/bin/activate
                    python3 --version
                    pip3 install boto3 botocore boto
                    ansible-playbook $WORKSPACE/deploy_db_ansible/delete_db.yml
                    deactivate
                    docker stop clixx-cont-1
                    docker rm clixx-cont-1
                    '''
                }
            }
        }

        stage ('Log Into ECR and push the newly created Docker') {
            steps {
                script {
                    def userInput = input(id: 'confirm', message: 'Push Image To ECR?', parameters: [[$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Push to ECR?', name: 'confirm']])
                }
                withCredentials([string(credentialsId: 'ECR_USERNAME', variable: 'ECR_USERNAME'), string(credentialsId: 'ECR_REPO', variable: 'ECR_REPO')]) {
                    sh '''
                    aws ecr get-login-password --region us-east-1 | docker login --username ${ECR_USERNAME} --password-stdin ${ECR_REPO}
                    docker tag clixx-image:$VERSION ${ECR_REPO}:clixx-image-$VERSION
                    docker tag clixx-image:$VERSION ${ECR_REPO}:latest
                    docker push ${ECR_REPO}:clixx-image-$VERSION
                    docker push ${ECR_REPO}:latest
                    '''
                }
            }
        }
    }
}

def getSonarPath(){
        def SonarHome= tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        return SonarHome
    }
def getDockerPath(){
        def DockerHome= tool name: 'docker-inst', type: 'dockerTool'
        return DockerHome
    }